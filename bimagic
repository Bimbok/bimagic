#!/bin/bash

echo "Welcome to the Git Wizard! Let's work some magic..."
echo

# Check if environment variables are set
if [[ -z "$GITHUB_USER" ]]; then
    echo "‚ö†Ô∏è  GITHUB_USER environment variable is not set!"
    echo "Please add this to your ~/.bashrc or ~/.zshrc:"
    echo "  export GITHUB_USER=\"your_github_username\""
    exit 1
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
    echo "‚ö†Ô∏è  GITHUB_TOKEN environment variable is not set!"
    echo "Please add this to your ~/.bashrc or ~/.zshrc:"
    echo "  export GITHUB_TOKEN=\"your_github_token\""
    exit 1
fi

echo "Using GitHub user: $GITHUB_USER"

while true; do
    echo "Choose your spell:"
    echo "1) Init new repo"
    echo "2) Add files"
    echo "3) Commit changes"
    echo "4) Push to remote"
    echo "5) Pull latest changes"
    echo "6) Create/switch branch"
    echo "7) Set remote (via token)"
    echo "8) Show status"
    echo "9) Remove files/folders (rm)"
    echo "10) Exit"
    read -p "Enter choice: " -r choice
    echo

    case $choice in
        1)
            read -p "Enter repo directory name (or '.' for current dir): " -r dirname
            if [[ "$dirname" == "." ]]; then
                git init
                echo "Repo initialized in current directory: $(pwd)"
            else
                mkdir -p "$dirname" && cd "$dirname" || exit
                git init
                echo "Repo initialized in new directory: $dirname"
                cd - > /dev/null 2>&1 || exit
            fi

            current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
            if [[ "$current_branch" == "master" ]]; then
                git branch -M main
                echo "Default branch renamed from 'master' to 'main'"
            fi
            ;;
        2)
            read -p "Enter files to add (or '.' for all): " -r files
            git add "$files"
            echo "Files staged: $files"
            ;;
        3)
            read -p "Enter commit message: " -r msg
            git commit -m "$msg"
            echo "Commit done!"
            ;;
        4)
            branch=$(git symbolic-ref --short HEAD 2>/dev/null)
            branch=${branch:-main}

            remote=$(git remote 2>/dev/null)
            if [[ -z "$remote" ]]; then
                echo "No remote set!"
                read -p "Enter repo name (example: my-repo.git): " -r reponame
                remote_url="https://${GITHUB_TOKEN}@github.com/${GITHUB_USER}/${reponame}"
                git remote add origin "$remote_url"
                echo "üîó Remote 'origin' set to $remote_url"
                remote="origin"
            fi

            echo "Pushing branch '$branch' to '$remote'..."
            git push -u "$remote" "$branch"
            ;;
        5)
            read -p "Enter branch to pull (default main): " -r branch
            branch=${branch:-main}
            
            remote=$(git remote 2>/dev/null)
            if [[ -z "$remote" ]]; then
                echo "No remote set! Cannot pull."
            else
                git pull "$remote" "$branch"
            fi
            ;;
        6)
            read -p "Enter branch name: " -r branch
            git checkout -b "$branch" 2>/dev/null || git checkout "$branch"
            echo "Now on branch $branch"
            ;;
        7)
            read -p "Enter repo name (example: my-repo.git): " -r reponame
            remote_url="https://${GITHUB_TOKEN}@github.com/${GITHUB_USER}/${reponame}"
            git remote remove origin 2>/dev/null
            git remote add origin "$remote_url"
            echo "Remote 'origin' set to $remote_url"
            ;;
        8)
            git status
            ;;
        9)
            read -p "Enter files/folders to remove (supports wildcards like *): " -r files
            if [[ -z "$files" ]]; then
                echo "No files specified!"
                continue
            fi
            
            # Safety check for dangerous patterns
            if [[ "$files" == "*" ]]; then
                echo "‚ö†Ô∏è  WARNING: You're about to remove ALL files in the current directory!"
                read -p "Are you sure? Type 'yes' to confirm: " -r confirm
                if [[ "$confirm" != "yes" ]]; then
                    echo "Operation cancelled."
                    continue
                fi
            fi
            
            # Check if files exist before removing
            if ls "$files" >/dev/null 2>&1; then
                echo "Files/folders to be removed:"
                ls -la "$files"
                echo
                read -p "Confirm removal? (y/N): " -r confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    # Check if we're in a git repository
                    if git rev-parse --git-dir > /dev/null 2>&1; then
                        echo "üóëÔ∏è  Removing from git tracking and filesystem..."
                        # Use git rm for tracked files, regular rm for untracked
                        git rm -rf "$files" 2>/dev/null || rm -rf "$files"
                        echo "Files/folders removed from git and filesystem: $files"
                    else
                        echo "üóëÔ∏è  Removing from filesystem (not a git repo)..."
                        rm -rf "$files"
                        echo "Files/folders removed from filesystem: $files"
                    fi
                else
                    echo "Operation cancelled."
                fi
            else
                echo "‚ùå No files/folders found matching: $files"
            fi
            ;;
        10)
            echo "Git Wizard vanishes in a puff of smoke..."
            exit 0
            ;;
        *)
            echo "Invalid choice! Try again."
            ;;
    esac

    echo
done
